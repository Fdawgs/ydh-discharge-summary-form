"use strict";function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}/**
 * @author Frazer Smith
 * @description Query PostgreSQL DB for discharge summaries awaiting sign-offs.
 *
 * @param {Object} pool - Pool object.
 * @param {('any'|'dr'|'nurse'|'pharmacy'|'ward')} signOffType - String specifying type of view to generate.
 * @param {String=} ward - optional if signOffType param not set to 'ward'.
 * @return {Function} express middleware
 */module.exports=function(a,b,c){return(/*#__PURE__*/function(){var d=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function d(e,f,g){var h,i;return regeneratorRuntime.wrap(function(d){for(;;)switch(d.prev=d.next){case 0:return h={any:"(raw::jsonb ? 'signoff_drCheckbox' = FALSE OR raw::jsonb ? 'medication_overallPharmacySignOffCheck' = FALSE OR raw::jsonb ? 'signoff_nurseFirstCheck' = FALSE OR raw::jsonb ? 'signoff_nurseSecondCheck' = FALSE)",dr:"(raw::jsonb ? 'signoff_drCheckbox' = FALSE)",nurse:"(raw::jsonb ? 'signoff_nurseFirstCheck' = FALSE OR raw::jsonb ? 'signoff_nurseSecondCheck' = FALSE)",pharmacy:"(raw::jsonb ? 'medication_overallPharmacySignOffCheck' = FALSE) AND (json_array_length(raw->'ttos') IS NOT NULL)",ward:"(raw::jsonb ? 'discharge_ward' = ".concat(c," AND (raw::jsonb ? 'signoff_drCheckbox' = FALSE OR raw::jsonb ? 'medication_overallPharmacySignOffCheck' = FALSE OR raw::jsonb ? 'signoff_nurseFirstCheck' = FALSE OR raw::jsonb ? 'signoff_nurseSecondCheck' = FALSE))")},i=function(){return a.query("WITH CTE\n\t\t\t\t\tAS (SELECT *,\n\t\t\t\t\tROW_NUMBER() OVER (PARTITION BY ID ORDER BY VERSION DESC) AS rn\n\t\t\t\t\tFROM public.discharge_summary)\n\t\t\t\t\tSELECT id, \"lastUpdate\", raw, version\n\t\t\t\t\tFROM CTE\n\t\t\t\t\tWHERE rn = 1\n\t\t\t\t\tAND ".concat(h[b],"\n\t\t\t\t\tORDER BY id DESC")).then(function(a){return a.rows})},d.next=4,i().then(function(a){e.awaitingsignoff||(e.awaitingsignoff={}),e.awaitingsignoff["".concat(b)]=a,g()})["catch"](function(a){g(a)});case 4:case"end":return d.stop();}},d)}));return function(){return d.apply(this,arguments)}}())};